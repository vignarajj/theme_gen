---
description: 
globs: 
alwaysApply: false
---
Plugin Overview:
The theme plugin is a Flutter Dart package that simplifies theme management for Flutter applications. It provides predefined themes (black and white, blue, red, green, purple) for both light and dark modes, accessible via AppTheme.lightTheme.<color> and AppTheme.darkTheme.<color>. It also includes a CLI tool (theme_maker create theme) that generates custom themes based on a user-provided hex color, producing a custom_theme.dart file with light and dark ThemeData. The plugin styles all major Flutter widgets, including Text, Button, TextField, Icon, Scaffold, SnackBar, Card, Dialog, BottomSheet, AppBar, and FloatingActionButton, ensuring a consistent UI. It is designed to be used as a dependency in Flutter projects and published to pub.dev.

Purpose and Goals:

Enable developers to apply predefined themes with minimal setup, supporting five color schemes for light and dark modes.
Allow custom theme creation via a CLI, generating ThemeData based on a hex color input (e.g., #FF00FF).
Ensure comprehensive widget theming for a cohesive app appearance.
Provide an example app to demonstrate theme switching and widget styling.
Include tests and documentation for reliability and ease of use.
Prepare the plugin for pub.dev publishing, making it accessible to the Flutter community.
Key Features:

Predefined Themes: Five color schemes (blackandwhite, blue, red, green, purple), each with light and dark variants, styling all specified widgets.
CLI Tool: Command theme_maker create theme prompts for a theme name and hex color, generating app_theme/<theme_name>_theme.dart with light and dark themes.
Widget Coverage: Themes style Text, Button (Elevated, Text, Outlined), TextField, Icon, Scaffold, SnackBar, Card, Dialog, BottomSheet, AppBar, and FloatingActionButton.
Example App: A demo app showcasing theme switching via a dropdown, including predefined and custom themes.
Testing: Unit tests for theme properties and CLI functionality.
Documentation: README and DartDoc for installation, usage, and API details.
Project Structure:
The plugin follows a standard Dart package structure, as outlined in the artifacts (June 20, 2025):

lib/: Core plugin code.
lib/theme.dart: Public API exporting AppTheme.
lib/src/themes/app_theme.dart: Defines AppTheme with light and dark theme accessors.
lib/src/themes/predefined_themes.dart: Implements ThemeData for predefined themes.
lib/src/themes/custom_theme_generator.dart: Generates custom themes from hex colors.
bin/theme.dart: CLI entry point for custom theme generation.
example/: Demo app showcasing theme usage.
example/lib/main.dart: Main app with theme switching.
example/pubspec.yaml: Configures dependencies.
test/theme_test.dart: Unit tests for themes and CLI.
pubspec.yaml: Defines package metadata and dependencies (flutter, args, hexcolor).
Development Environment:

IDE: Cursor IDE, used for coding, testing, and Git operations.
Language: Dart, with Flutter SDK for widget theming.
Dependencies:
flutter: For ThemeData and widget styling.
args: ^2.5.0: For CLI argument parsing.
hexcolor: ^3.0.1: For hex color parsing.
flutter_test: For unit testing.
very_good_analysis: ^6.0.0: For linting.
Tools:
Cursor’s terminal for running dart and flutter commands (e.g., dart run bin/theme.dart, flutter test, flutter pub publish).
Cursor’s Git integration for committing and pushing to GitHub.
Dart analyzer for code quality, accessible via Cursor’s analysis tools.